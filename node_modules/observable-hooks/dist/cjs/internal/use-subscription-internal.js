"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSubscriptionInternal = void 0;
var helpers_1 = require("../helpers");
var react_1 = require("react");
/**
 *
 * @template TInput Input value within Observable.
 *
 * @param useCustomEffect useEffect or useLayoutEffect
 * @param args collected arguments
 */
function useSubscriptionInternal(useCustomEffect, args) {
    var forceUpdate = helpers_1.useForceUpdate();
    var argsRef = react_1.useRef(args);
    var errorRef = react_1.useRef();
    var subscriptionRef = react_1.useRef();
    // Update the latest observable and callbacks
    // synchronously after render being committed
    helpers_1.useIsomorphicLayoutEffect(function () {
        argsRef.current = args;
    });
    useCustomEffect(function () {
        errorRef.current = null;
        // keep in closure for checking staleness
        var input$ = argsRef.current[0];
        var subscription = input$.subscribe({
            next: function (value) {
                if (input$ !== argsRef.current[0]) {
                    // stale observable
                    return;
                }
                if (argsRef.current[1]) {
                    return argsRef.current[1](value);
                }
            },
            error: function (error) {
                if (input$ !== argsRef.current[0]) {
                    // stale observable
                    return;
                }
                if (argsRef.current[2]) {
                    errorRef.current = null;
                    return argsRef.current[2](error);
                }
                errorRef.current = error;
                forceUpdate();
            },
            complete: function () {
                if (input$ !== argsRef.current[0]) {
                    // stale observable
                    return;
                }
                if (argsRef.current[3]) {
                    return argsRef.current[3]();
                }
            }
        });
        subscriptionRef.current = subscription;
        return function () {
            subscription.unsubscribe();
        };
    }, [args[0]]);
    if (errorRef.current) {
        // Let error boundary catch the error
        throw errorRef.current;
    }
    return subscriptionRef;
}
exports.useSubscriptionInternal = useSubscriptionInternal;
//# sourceMappingURL=use-subscription-internal.js.map