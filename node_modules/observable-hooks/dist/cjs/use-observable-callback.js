"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useObservableCallback = void 0;
var react_1 = require("react");
var helpers_1 = require("./helpers");
/**
 * Returns a callback function and an events Observable.
 *
 * Whenever the callback is called, the Observable will
 * emit the first argument of the callback.
 *
 * (From v2.1.0) Optionally accepts a selector function that transforms
 * a list of event arguments into a single value.
 *
 * If you want value instead of Observable
 * see example on [[useObservableState]].
 *
 * âš  **Note:** `useObservableCallback` will call `init` once and always return
 * the same Observable. It is not safe to access closure (except other Observables)
 * directly inside `init`. Use ref or [[useObservable]] with `withLatestFrom` instead.
 *
 * @template TOutput Output value within Observable.
 * @template TInput Selected values.
 * @template TParams A tuple of event callback parameters.
 *
 * @param init A pure function that, when applied to an Observable,
 * returns an Observable.
 * @param selector A function that transforms an array of event arguments
 * into a single value.
 */
function useObservableCallback(init, selector) {
    var events$Ref = helpers_1.useRefFn(helpers_1.getEmptySubject);
    var outputs$Ref = helpers_1.useRefFn(function () { return init(events$Ref.current); });
    var callbackRef = react_1.useRef(function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        events$Ref.current.next(selector ? selector(args) : args[0]);
    });
    return [callbackRef.current, outputs$Ref.current];
}
exports.useObservableCallback = useObservableCallback;
//# sourceMappingURL=use-observable-callback.js.map